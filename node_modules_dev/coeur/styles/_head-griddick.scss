@use 'sass:math';


/*


Chronicles of Griddick — 
   The Diesel of Grids 
     Combines media, grids, flexbox

this is not a grid or flexbox framework. It's just simplifying CSS grids.
it is NOT as extensible as twitter bootstrap, etc.
it also doesn't have polyfills for older browsers

CSS Grid-based Layout:
http://learncssgrid.com/
https://css-tricks.com/snippets/css/complete-guide-grid/
https://css-tricks.com/snippets/css/a-guide-to-flexbox/
Explanation of min-max: https://bitsofco.de/how-the-minmax-function-works/

CSS Flexbox Layout:
https://css-tricks.com/snippets/css/a-guide-to-flexbox/#flexbox-basics




# What's this About?

CSS Grids and Flexbox work very well together, and bring a lot of power to page layouts


## Browser Support

- Flexbox is supported by almost all browsers, including IE11.
- CSS Grids are supported by most modern browsers. IE 11 is the main outlier.
- Solution: Flexbox is safe as a fall-back. Design for "simple/mobile" layouts as a vertical layout
  - Use as few "tricks" as possible


## Grids

Grids are good for One and Two-dimensional components, pages, and layouts where you know 
about the number of columns and rows, and about how elements fit in there. Good for placing

- Properties for the Grid Container
  - display
  - grid-template-columns
  - grid-template-rows
  - grid-template-areas
  - grid-template
  - grid-column-gap
  - grid-row-gap
  - grid-gap
  - justify-items
  - align-items
  - place-items
  - justify-content
  - align-content
  - place-content
  - grid-auto-columns
  - grid-auto-rows
  - grid-auto-flow
  - grid

- Properties for the Grid Items
  - grid-column-start
  - grid-column-end
  - grid-row-start
  - grid-row-end
  - grid-column
  - grid-row
  - grid-area
  - justify-self
  - align-self
  - place-self


## Flexbox

Flexbox is useful for one row of indeterminate # of items, in one direction (though items can wrap
to the next row, and you can change that behavior).

- Better for a dynamic set of items
- Great for cards, w/ set image, flexible body, and text at bottom of card
  - parent: flex
  - child: flex: 1 (for flexible paragraphs)


//    - https://gridbyexample.com/patterns/



## Grids vs. Flexbox

- Grids are more like your traditional design grids. With card layouts, they will be slotted to each grid.
  With flexbox layout, the items wrapped to the next line will take up the entire row, and not slot a grid.
- "A simple question to ask yourself when deciding between grid or flexbox is:
  - do I only need to control the layout by row or column – use a flexbox
  - do I need to control the layout by row and column – use a grid"
  - from: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Relationship_of_Grid_Layout
- Flexbox: 
  - space and positioning is determined by the content IN THE CHILDREN
  - responsive without more media queries
- Grids: strict about fitting everything into preset grids







    notes

    FUTURE
    - 11/17 - not supported instead of align-items, use align-self and justify-self

    ._grid       — applies to the grid container
    ._grid_item  — applies directly to the item in the div


    - Note note about special placement (not griddick but still useful):
      .item-a {
        grid-column: 1;
        grid-row: 1 / 3;
      }
      .item-e {
        grid-column: 5;
        grid-row: 1 / 3;
      }

    - change to x-align (justify-) and y-align (align-)
    - notice need to add justify: space-between and align: space-between!!!!

    - Note about using auto for col width
      - grid-template-columns: 1fr auto 1fr
      - not as useful usually without explicit width declaration

    - JS helpers for adding special grid rues:
      append data- and then JS will attach the appropriate values!
      hint: set it up as a json array: <div id="locations" data-locations='[{"name":"Bath","url":"/location/bath","img":"/thumb.jpg"},{"name":"Berkhamsted","url":"/location/berkhamsted","img":"/thumb.jpg"}]'>

      grid-column-start: 2;
      grid-column-end: five;
      grid-row-start: row1-start
      grid-row-end: 3


    - integrate CSS variables as optional
      - can create mixin of grid-col2(--1, --2) etc
        - this slightly simplifies @media queries where
        - all you need to do is redefine col/width vars, and not a new grid

    - Add progressive enhancement:
      - https://www.gridtoflex.com/
      - @supports (display: grid) {
        - this is good as a media query, for padding etc. tht only pertain to if grids are available

    - Add display: contents
      - https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Relationship_of_Grid_Layout
      - This can be a way to get items nested into the grid to act as if they are part of the grid, and 
        is a way around some of the issues that would be solved by subgrids once they are implemented. 
        You can also use display: contents in a similar way with flexbox to enable nested items to become 
        flex items.

    - Absolute positioning inside a grid can use grid-row/col-start to set start position!!
      - really easy to center things
      - https://codepen.io/scwewywabbit/pen/gdgjqv

    ** NEW SYNTAX

    Equal sized containers 
    - (old syntax is confusing)
    - xs defaults to single column, unless _grid-1-xs (forced)
    - grid applies -sm and upwards 

    _grid-1         // one container of one full width
    _grid-cols-2    // two containers of equal width (replaces: _grid-two)
    _grid-cols-12   // 12 containers of equal width



    Uulti-sized column grids
    - up to three column groups (if 4 and above, just use a grid-col-2)

    _grid-1-2       // 1fr 2fr
    _grid-1-3       // 1fr 3fr
    _grid-2-5       // 2fr 5fr
    _grid-2-2-1
    _grid-2-1-1     //


*/



// 
// Base griddick setup
// 

$grid-gap: $size-base;



// take up the entire row
// on mobile screens
// this acts as an override
%gr {
  display: grid;
  grid-gap: $grid-gap;
}
@mixin gr { // can be extended
  display: grid;
  grid-gap: $grid-gap;
}

// include this if you want the grid to expand to full-width
// if class appended with -xs, this is ignored
%grid-xs-full,
  ._grid-xs-full {
  @include screen-xs {
    // display: block; // when block, can't reflow w/ grid-row or grid-col
    display: grid;
    grid-template-columns: 1fr !important;
    & > * { width: 100%; }
  }
  &-i {
    @include screen-xs-only {
      // display: block !important;
      display: grid !important;
      grid-template-columns: 1fr !important;
      & > * { width: 100%; }
    }
  }
}

%grid-xs-block,
  ._grid-xs-block {
    // on small screens, block can fix overflow issues for long content, e.g. <pre>
    // BUT you can't reflow content w/ templates
    @include screen-xs-only {
      display: block !important;
    }
}

// lack of mixins b/c they can't be nested
// lack of extend b/c they can't be used within media selectors
// womp womp, ugly code for now

// generates a number of equal columns
@mixin generate-grid-cols($number) {
  @extend %grid-xs-full;

  // append %-xs option forces grids to appear on tiny devices, AS WELL AS other sizes
  // (code simplified, but produces both ._grid-#... and _grid-#-xs)
  &, &-xs {
    @include gr;
    grid-template-rows:    1fr;
    grid-template-columns: repeat($number, 1fr);
    @include screen-attr-gen(('xs','sm','md','lg')) {
      @include gr;
      grid-template-rows:    1fr;
      grid-template-columns: repeat($number, 1fr);
    }
  }
}

// inputs an array:
//    @include griddick(1, 3, 1)
// generates:
//     _grid-1-3-1
@mixin griddick($array) {
  @extend %grid-xs-full;

  // append %-xs option forces grids to appear on tiny devices, AS WELL AS other sizes
  // appending sm, md, lg only applies the grid to that size
  &, &-xs {
    // @extend %gr;
    @include gr;
    grid-template-rows:    1fr;
    $cols: '';
    @each $col in $array {
      @if $col == 'auto' {
        $cols: #{$cols} auto;
      } @else {
        $cols: #{$cols} #{$col}fr;
      }
    }
    grid-template-columns: $cols;
    @include screen-attr-gen(('xs','sm','md','lg')) {
      @include gr;
      grid-template-rows:    1fr;
      $cols: '';
      @each $col in $array {
        @if $col == 'auto' {
          $cols: #{$cols} auto;
        } @else {
          $cols: #{$cols} #{$col}fr;
        }
      }
      grid-template-columns: $cols;
    }
  }

  // class name generator / not really necessary
  // $class: '._grid';
  // @each $col in $array {$class: #{$class}-#{$col} }
  // @warn 'final class: `#{$class}`'
}

// auto columns
// works well with inline grids or content of variable space
// e.g. three auto columns: grid-template-columns: auto auto auto;
@mixin generate-grid-autocols($number) {
  &, &-xs {
    @extend %gr;
    grid-template-rows:    1fr;
    grid-template-columns: repeat($number, auto);
  }
}



// @mixin gridGen() {

// }
/*
// @each $opacity in '100' 1, '90' 0.9, '80' 0.8, '70' 0.7, '60' 0.6, '50' 0.5, '40' 0.4, '30' 0.3, '20' 0.2, '10' 0.1, {
//   @include element-generator(opacity, nth($opacity, 1), nth($opacity, 2));
// }
// @mixin element-generator(element, valDesc, val:valDesc) {
//   ._#{element}-#{valDesc} {
//     #{element}: #{val}
//   }
// }
*/









// 
//    ONE CONTAINER SECTIONS
// 

/*


    TODO LATER: (not very useful)
    Row Organized Grids
    grid-row-one means one row, multi columns
    responsive will remain column-oriented
    %grid-row-one, ._grid-row-one {
      display: grid;
      grid-gap: $size-base; 
      grid-template-rows:    1fr;
      grid-template-columns: repeat(auto-fit, 350px);
      @extend %grid-xs-full;

      @include screen-xs {
        grid-template-columns: repeat(auto-fit, 100%);
      }
    }


*/


// basic simple grid
._grid {
  display: grid;
  grid-gap: $grid-gap;
}



// Column Organized Grids
// - container columns that span multiple rows
// - equal sized
// - new syntax: _grid-cols-1
// - old syntax: _grid-two
// - these names are not generated so they can be @extended

%grid-cols-1, ._grid-cols-1, ._grid-1, ._grid-one {
  @include generate-grid-cols(1);
}
%grid-cols-2, ._grid-cols-2, ._grid-2, ._grid-two {
  @include generate-grid-cols(2);
}
%grid-cols-3, ._grid-cols-3, ._grid-3, ._grid-three {
  @include generate-grid-cols(3);
}
%grid-cols-4, ._grid-cols-4, ._grid-4, ._grid-four {
  @include generate-grid-cols(4);
}
%grid-cols-5, ._grid-cols-5, ._grid-5, ._grid-five {
  @include generate-grid-cols(5);
}
%grid-cols-6, ._grid-cols-6, ._grid-6, ._grid-six {
  @include generate-grid-cols(6);
}
%grid-cols-7, ._grid-cols-7, ._grid-7, ._grid-seven {
  @include generate-grid-cols(7);
}
%grid-cols-8, ._grid-cols-8, ._grid-8, ._grid-eight {
  @include generate-grid-cols(8);
}
%grid-cols-9, ._grid-cols-9, ._grid-9, ._grid-nine {
  @include generate-grid-cols(9);
}
%grid-cols-10, ._grid-cols-10, ._grid-10, ._grid-ten {
  @include generate-grid-cols(10);
}
%grid-cols-11, ._grid-cols-11, ._grid-11, ._grid-eleven {
  @include generate-grid-cols(11);
}
%grid-cols-12, ._grid-cols-12, ._grid-12, ._grid-twelve {
  @include generate-grid-cols(12);
}


// 
//    Auto Columns
//      creates # of auto width columns
// 
%grid-1--auto, ._grid-1--auto {
  @include generate-grid-autocols(1);
}
%grid-2--auto, ._grid-2--auto {
  @include generate-grid-autocols(2);
}
%grid-3--auto, ._grid-3--auto {
  @include generate-grid-autocols(3);
}
%grid-4--auto, ._grid-4--auto {
  @include generate-grid-autocols(4);
}
%grid-5--auto, ._grid-5--auto {
  @include generate-grid-autocols(5);
}
%grid-6--auto, ._grid-6--auto {
  @include generate-grid-autocols(6);
}
%grid-7--auto, ._grid-7--auto {
  @include generate-grid-autocols(7);
}
%grid-8--auto, ._grid-8--auto {
  @include generate-grid-autocols(8);
}

// multi auto columns 
// ex: [    1fr    ] [    1fr    ] [ small ]
%grid-1-auto, ._grid-1-auto {
  @include griddick((1,'auto'));
}
%grid-auto-1, ._grid-auto-1 {
  @include griddick(('auto',1));
}
  %grid-1-1-auto, ._grid-1-1-auto {
    @include griddick((1,1,'auto'));
  }
  %grid-1-auto-1, ._grid-1-auto-1 {
    @include griddick((1,'auto',1));
  }
  %grid-auto-1-1, ._grid-auto-1-1 {
    @include griddick((1,'auto',1));
  }



// 
//    TWO / MULTI COLUMN LAYOUTS
// 

// these could be generated, 
// but most likely they'll never be used,
// so only the popular ones are written out for now
// - written out numbers (e.g. one-three) is old and deprec.


%grid-1-2, ._grid-1-2, ._grid-one-two {
  @include griddick((1,2));
}
%grid-2-1, ._grid-2-1, ._grid-two-one {
  @include griddick((2,1));
}



%grid-1-3, ._grid-1-3, ._grid-one-three {
  @include griddick((1,3));
}
%grid-3-1, ._grid-3-1, ._grid-three-one {
  @include griddick((3,1));
}

%grid-1-4, ._grid-1-4, ._grid-one-four {
  @include griddick((1,4));
}
%grid-4-1, ._grid-4-1, ._grid-four-one {
  @include griddick((4,1));
}

%grid-1-5, ._grid-1-5, ._grid-one-five {
  @include griddick((1,5));
}
%grid-5-1, ._grid-5-1, ._grid-five-one {
  @include griddick((5,1));
}

%grid-1-6, ._grid-1-6, ._grid-one-six {
  @include griddick((1,6));
}
%grid-6-1, ._grid-6-1, ._grid-six-one {
  @include griddick((6,1));
}

%grid-1-7, ._grid-1-7, ._grid-one-seven {
  @include griddick((1,7));
}
%grid-7-1, ._grid-7-1, ._grid-seven-one {
  @include griddick((7,1));
}

%grid-1-11, ._grid-1-11, ._grid-one-eleven {
  @include griddick((1,11));
}
%grid-11-1, ._grid-11-1, ._grid-eleven-one {
  @include griddick((11,1));
}


%grid-2-3, ._grid-2-3, ._grid-two-three {
  @include griddick((2,3));
}
%grid-3-2, ._grid-3-2, ._grid-three-two {
  @include griddick((3,2));
}

// these are more or less for semantics
%grid-2-4, ._grid-2-4, ._grid-two-four {
  @include griddick((2,4));
}
%grid-4-2, ._grid-4-2, ._grid-four-two {
  @include griddick((4,2));
}

%grid-2-5, ._grid-2-5, ._grid-two-five {
  @include griddick((2,5));
}
%grid-5-2, ._grid-5-2, ._grid-five-two {
  @include griddick((5,2));
}

%grid-3-5, ._grid-3-5, ._grid-three-five {
  @include griddick((3,5));
}
%grid-5-3, ._grid-5-3, ._grid-five-three {
  @include griddick((5,3));
}

// THREE COLUMN

%grid-1-1-2, ._grid-1-1-2, ._grid-one-two-two {
  @include griddick((1,1,2));
}
%grid-1-2-2, ._grid-1-2-2, ._grid-one-two-two {
  @include griddick((1,2,2));
}
%grid-1-2-1, ._grid-1-2-1, ._grid-one-two-one {
  @include griddick((1,2,1));
}
%grid-2-2-1, ._grid-2-2-1, ._grid-two-two-one {
  @include griddick((2,2,1));
}
%grid-2-1-1, ._grid-2-1-1, ._grid-two-one-one {
  @include griddick((2,1,1));
}

%grid-1-3-1, ._grid-1-3-1, ._grid-one-three-one {
  @include griddick((1,3,1));
}
  %grid-1-3-2, ._grid-1-3-2, ._grid-one-three-two {
    @include griddick((1,3,1));
  }
%grid-1-4-1, ._grid-1-4-1, ._grid-one-four-one {
  @include griddick((1,3,1));
}
%grid-1-5-1, ._grid-1-5-1, ._grid-one-five-one {
  @include griddick((1,5,1));
}
%grid-1-6-1, ._grid-1-6-1, ._grid-one-six-one {
  @include griddick((1,6,1));
}

%grid-3-3-1, ._grid-3-3-1, ._grid-three-three-one {
  @include griddick((3,3,1));
}
%grid-1-3-3, ._grid-1-3-3, ._grid-one-three-three {
  @include griddick((1,3,3));
}


















// 
//    CONTAINER PATTERNS & LAYOUTS
// 

/* 
      - Grids work with the 'display: grid' 
      - many grid attributes like align and justify only affect the grid's children
        - but align would still be added to the PARENT class

      - in this example, both h1 and p elements will act like they're text-align: right
        because they're both children under the grid.

          <div class="grid align-right">
            <h1>header</h1>
            <p>some paragraph text</p>
          </div>

      - if you want the header and paragraph to still be text-align: left, but 
        be positioned on the right side of the grid container, wrap it up in a div:

          <div class="grid align-right">
            <div>
              <h1>header</h1>
              <p>some paragraph text</p>
            </div>
          </div>
 */




// 
//    ALIGNMENT / JUSTIFY
// 


// applies to grid children

._grid-center { // places item in center
  display: grid;
  place-items: center;
}

// ._grid-center {
//   display: grid;
//   grid-template-rows: 1fr;
//   grid-template-columns: 1fr;
//   justify-items: center; // middle (left/right)
//   align-items: center; // middle (top/down)
//   // height: 100%; // sometimes required? maybe when set explicit height?
// }
  ._grid-center-h { // only horizontally center, not left/right
    display: grid;
    grid-template-rows: 1fr;
    grid-template-columns: 1fr;
    // justify-items: center; // middle (left/right)
    align-items: center; // middle (top/down)
    // height: 100%; // sometimes required? maybe when set explicit height?
  }

%grid-center {
  // create centered grids for immediate child content
  & > * {
    @extend ._grid-center;
  }
}




























// 
// 
// 
// 
// 
// 
//    #HELPERS
// 
// 
// 
// 
// 
// 

//    helpers for alignment, grid modifiers, etc.





// 
//    GRID CONTAINER & ALIGNMENT
// 

/*
    Affects the grid container classes

    Alignment w/ grids can be confusing:
      [ justify-items ]:  horizontal -  start/middle/end — left/center/right 
      [ align-items ]:    vertical -    start/middle/end — top/center/bottom 
*/

//  CONTAINER (parent)

._align-stretch {
  display: grid;
  justify-content: stretch;
}
._align-around {
  display: grid;
  justify-content: space-around;
}
._align-between {
  display: grid;
  justify-content: space-between;
}
._align-evenly {
  display: grid;
  justify-content: space-evenly;
}

// added to griddick
._align-baseline {
  display: grid;
  align-items: baseline; // bottom of grid text
}
._align-end {
  display: grid;
  align-items: end; // bottom of grid text
}


//  LEFT / RIGHT
._align-left {
  display: grid;
  justify-items: start; // align to left
}
._align-right {
  display: grid;
  justify-items: end; // align to right
}
._align-middle,
._align-horizontally {
  display: grid;
  // justify-items: center; // horizontally align 
  @include importantizer("justify-items" "center");
}
  ._align-middle-xs {
    @include screen-xs {
      display: grid;
      justify-items: center; // align to right
    }
  }

// TOP / BOTTOM
._align-top {
  display: grid;
  align-items: start; // bottom of grid
}

// not to be confused with ._grid-center // places item in center
._align-center,
._align-vertically {
  display: grid;
  align-items: center; // vertical middle of grid
}
._align-bottom {
  display: grid;
  align-items: end; // bottom of grid
}


// CHILD ALIGNMENT 

._justify-end {
  justify-self: end;
}
._justify-start {
  justify-self: start;
}



._grid-gap-none {
  grid-gap: 0;
}
  ._grid-gap-none-xs {
    @include screen-xs {
      grid-gap: 0;
    }
  }
  ._grid-gap-none-sm {
    @include screen-sm {
      grid-gap: 0;
    }
  }

  ._grid-gap-row-none {grid-row-gap: 0;}
  ._grid-gap-column-none {grid-row-gap: 0;}

._grid-gap { grid-gap: $size}

._grid-gap-small {grid-gap: math.div($size-base,2);}
  ._grid-gap-row-small {grid-row-gap: math.div($size-base,2);}
  ._grid-gap-column-small {grid-row-gap: math.div($size-base,2);}

._grid-gap-large {
  grid-gap: $size-base*2;
}
  ._grid-gap-large-sm {
    @include screen-sm {
      grid-gap: $size-base*2;
    }
  }
  ._grid-gap-row-large {grid-row-gap: $size-base*2;}
  ._grid-gap-column-large {grid-row-gap: $size-base*2;}

._grid-gap-larger {
  grid-gap: $size-base*4;
}
  ._grid-gap-larger-sm {
    @include screen-sm {
      grid-gap: $size-base*4;
    }
  }
  ._grid-gap-row-larger {grid-row-gap: $size-base*2;}
  ._grid-gap-column-larger {grid-row-gap: $size-base*2;}


._grid-inline {
  display: inline-grid; // good for grids that don't stretch fully
}




// 
//    GRID ITEM (child)
// 

//    ._grid_item- only affects items inside the grid container


// right side grid content (e.g. sidebar or image) appear ABOVE
// the left content (regular flow places it below)
._grid_item-first, ._grid_item-row-first-xs {
  grid-row-start: 1;
  &-xs {
    @include screen-xs-only { grid-row-start: 1; }
  }
}

._span-xs-reset { // forces xs to start at first column for responsive views
  @include screen-xs {
    grid-column-start: 1 !important;
  }
}


// item spans
// e.g. width or height of the elemnt (how many tracks does it span?)
// these are not generated b/c I like extending them
// used mainly for generating grid markers
._span-row-2 { grid-row: span 2; }
._span-row-3 { grid-row: span 3; }
._span-row-4 { grid-row: span 4; }
._span-row-5 { grid-row: span 5; }
._span-row-6 { grid-row: span 6; }
._span-row-7 { grid-row: span 7; }
._span-row-8 { grid-row: span 8; }

._span-col-2 { grid-column: span 2; } ._span-xs-col-2 { @include screen-xs-only {grid-column: span 2;} } ._span-sm-col-2 { @include screen-sm-only {grid-column: span 2;} }
._span-col-3 { grid-column: span 3; } ._span-xs-col-3 { @include screen-xs-only {grid-column: span 3;} } ._span-sm-col-3 { @include screen-sm-only {grid-column: span 3;} }
._span-col-4 { grid-column: span 4; } ._span-xs-col-4 { @include screen-xs-only {grid-column: span 4;} } ._span-sm-col-4 { @include screen-sm-only {grid-column: span 4;} }
._span-col-5 { grid-column: span 5; } ._span-xs-col-5 { @include screen-xs-only {grid-column: span 5;} } ._span-sm-col-5 { @include screen-sm-only {grid-column: span 5;} }
._span-col-6 { grid-column: span 6; } ._span-xs-col-6 { @include screen-xs-only {grid-column: span 6;} } ._span-sm-col-6 { @include screen-sm-only {grid-column: span 6;} }
._span-col-7 { grid-column: span 7; } ._span-xs-col-7 { @include screen-xs-only {grid-column: span 7;} } ._span-sm-col-7 { @include screen-sm-only {grid-column: span 7;} }
._span-col-8 { grid-column: span 8; } ._span-xs-col-8 { @include screen-xs-only {grid-column: span 8;} } ._span-sm-col-8 { @include screen-sm-only {grid-column: span 8;} }






// this forces grids to obey min sizes
// 
// _grid-overflow-hidden — (default) hides overflow for a grid with too-wide content
// _grid-overflow-scroll — scrolls overflow for a grid with too-wide content
// apply directly to grid-item, not container
._grid_item-overflow {
  /*
    https://stackoverflow.com/questions/43311943/prevent-content-from-expanding-grid-items

    By default, a grid item cannot be smaller than the size of its content.
    Grid items have an initial size of min-width: auto and min-height: auto.
    You can override this behavior with min-width: 0, min-height: 0 or overflow with any value other than visible.
  */
  &, &-hidden {
    overflow:hidden;
  }
  &-scroll {
    overflow:scroll;
  }

  &, * {
    min-height: 0;   /* NEW; needed for Firefox */
    min-width: 0;   /* NEW; needed for Firefox */
  }
}






// 
//    GRID AUTO PLACEMENT
// 

//    Most of Griddick uses auto-placement (where the content is automatically placed on the grid)

// (note: row is default)
._grid-column { // fill columns first
  grid-auto-flow: column;
}
._grid-dense { // causes items to appear out of order, to fill in gaps
  grid-auto-flow: dense;
}





// 
//    GRID REPEATERS
//    - generates a table-like grid that fills the space automatically with the min-max values
//    - great for an indeterminate list items like generated cards, info bits, etc.
//    - ex: grid-template-columns: repeat(auto-fill, 200px);
//      - This means that grid will create as many 200 pixels column tracks as will fit in the container.
//    - minmax: https://bitsofco.de/how-the-minmax-function-works/

@mixin grid-repeater($min, $max)  {
  display: grid;
  grid-gap: $size-base;
  grid-template-columns: repeat(auto-fill, minmax($min, $max));
}

._grid-repeater-small {
  @include grid-repeater(50px, 1fr);
}
._grid-repeater {
  @include grid-repeater(15ch, 1fr);
}


// 
// Auto Fit
// for xs screen,
// overrides default 1 row behavior
// to try to fit as much stuff as possible
// into one row. useful for lists or image thumbnails, without blowing things up
// really big when in mobile view

._grid-repeater-fit {
  // @extend ._grid-repeater-small;
  // @include screen-xs {
    display: grid;
    grid-gap: math.div($size-base,2);
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  // }

  @include screen-attr-gen(('xs','sm','sm-down','md','lg')) {
    display: grid;
    grid-gap: math.div($size-base,2);
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  }

  // simple helper for image grids
  &.__images {
    img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
  }
}































